#!/usr/bin/env python3

## 1. Encapsulamiento: atributo normal, atributo protegido y atributo privado.
def p1():
    class Escudo:
        def __init__(self):
            self.atributo = "Soy un atributo."
            self._atributo_protegido = "Soy un atributo protegido."
            self.__atributo_privado = "Soy un atributo privado."

    thing = Escudo()
    print(thing.atributo)
    print(thing._atributo_protegido)
    print(thing._Escudo__atributo_privado)

## 2. Encapsulamiento: 
def p2():
    class Coche:
        def __init__(self, marca, modelo):
            self.marca = marca
            self.modelo = modelo
            self.__kilometraje = 0

        def conducir(self, kilometros):
            if kilometros > 0:
                self.__kilometraje += kilometros
                print(f"\n[+] El auto va a {self.__kilometraje} km/h.")
            else:
                print(f"\n[!] El auto va a {kilometros} km/h.")

    auto_1 = Coche("Renault", "Alaskan")
    auto_1.conducir(150)

## 3. Metodo especial: *items. 
def p3():
    class Tienda:
        def __init__(self, *items):
            self.items = items 

        def __str__(self):
            return f"\n[#] Frutas: {', '.join(self.items)}"

        def bucle(self):
            for items in self.items:
                print(f"\n{items}")

    caja = Tienda("Manzana", "Platano", "Kiwi", "Pera")

    print(caja)
    caja.bucle()

## 4. Metodo especial: Usando y no usando el metodo "__len__" en una intancia *items(frutas).
# Este metodo se conecta directamente al igual que "__str__" de modo que cuando se hace
# un "len" en el objeto si llamar a la funcion "__len__" te devuelve el conteo.
def p4():
    class Tienda:
        def __init__(self, *items):
            self.items = items 

        def __str__(self):
            return f"\n[#] Frutas: {len(self.items)}."
        
        def __len__(self):
            return len(self.items)

    caja = Tienda("Manzana", "Platano", "Kiwi", "Pera")

    print(caja)
    print(len(caja))

## 5. Metodo especial: Usando y no usando "__getitem__" en una lista de numeros.
def p5():
    class Lista:
        def __init__(self):
            self.nums = [1, 2, 3, 4]
        
        def __getitem__(self, num):
            return self.nums[num]

    lista = Lista()
    print(lista.nums[0])
    print(lista[0])

## 6. Metodo especial: Usando y no usando "__call__" en una instancia "saludo" -> "hola".
def p6():
    class Saludo:
        def __init__(self, saludo):
            self.saludo = saludo

        def __call__(self, name):
            return f"\n[#] {self.saludo} {name}."

        def llamar(self, name):
            return f"\n[#] {self.saludo} {name}."

    interaccion = Saludo("Hola")
    print(interaccion("Jose!"))
    print(interaccion.llamar("Jose!"))

## 7.
def p7():
    class Punto:

    punto_1 = Punto(2, 4)
    punto_2 = Punto(5, 3)

## 8.
def p8():
    pass

