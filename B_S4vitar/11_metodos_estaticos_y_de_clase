#!/usr/bin/env python3

## 1. @staticmethod: Juego goty mayor o igual a 8.
#
def p1():
    class Triangle:
        goty = 7 

        def __init__(self, base, height, best=7):
            self.base = base
            self.height = height
            self.best = best

        @staticmethod # Opcion usando directamente un numero.
        def game_1(review):
            return review > 7
    
        @staticmethod # Opcion usando la variable "goty".
        def game_2(review):
            return review > Triangle.goty

        @staticmethod # Opcion usando una instancia + cambio de codigo para retornar.
        def game_3(instancia, review):
            return review > instancia.best

    triangle_obj_1 = Triangle(3, 5)
    print(f"\n[#] 1.¿GOTY? -> {Triangle.game_1(9)}")
    print(f"\n[#] 2.¿GOTY? -> {Triangle.game_2(9)}")
    print(f"\n[#] 3.¿GOTY? -> {Triangle.game_3(triangle_obj_1, 9)}")

## 2. @staticmethod: calculadora con funciones
#
def p2():
    class Calculator:

        @staticmethod
        def sum(num1, num2):
            return num1 + num2

        @staticmethod
        def minus(num1, num2):
            return num1 - num2 

        @staticmethod
        def division(num1, num2):
            return num1 // num2 if num2 != 0 else f"\n[!] Error: No es posible dividir entre 0."

        @staticmethod
        def multiplication(num1, num2):
            return num1 * num2

    print(f"\n[#] Suma: {Calculator.sum(5, 4)}.")
    print(f"\n[#] Resta: {Calculator.minus(5, 4)}.")
    print(f"\n[#] Division: {Calculator.division(10, 5)}.")
    print(f"\n[#] multiplication: {Calculator.multiplication(10, 5)}.")

## 3. __str__: auto deportivo y auto clasico.
#
def p3():
    class Automovil:
        def __init__(self, marca, modelo):
            self.marca =  marca
            self.modelo = modelo

        @classmethod 
        def deportivos(cls, marca):
            return cls(marca, "Deportivo")

        @classmethod 
        def clasicos(cls, marca):
            return cls(marca, "Deportivo")

        def __str__(self):
            return f"\n[#] Marca: {self.marca}; Modelo: {self.modelo}."
        
    objeto_1 = Automovil.deportivos("Ferrari")
    print(objeto_1)

    objeto_2 = Automovil.clasicos("Mustang")
    print(objeto_2)

## 3. classmethod: El estudiante es mayor de edad o menor?
#
def p4():
    class Estudiantes:

        estudiantes = []

        def __init__(self, nombre, edad):
            self.nombre = nombre
            self.edad = edad

            Estudiantes.estudiantes.append(self)
        
        @staticmethod
        def es_mayor_de_edad(edad):
            return edad >= 18

        @classmethod
        def crear_estudiantes(cls, nombre, edad):
            if cls.es_mayor_de_edad(edad):
                return cls(nombre, edad)
            else:
                print(f"\n[!] El estudiante {nombre} es menor edad.")
        
        @staticmethod
        def mostrar_estudiantes():
            print(f"\n[#] Estudiantes mayores de edad:.\n")
            for i, alumnos in enumerate(Estudiantes.estudiantes):
                print(f"\t[{i}] {alumnos.nombre}.")

    Estudiantes.crear_estudiantes("Hackermate", 43)
    Estudiantes.crear_estudiantes("S4vitar", 28)
    Estudiantes.crear_estudiantes("Xerosec", 12)
    Estudiantes.crear_estudiantes("Hackavis", 8)

    Estudiantes.mostrar_estudiantes()

##########################################################################################
##########################################################################################
##########################################################################################
##########################################################################################
##########################################################################################
##########################################################################################
##########################################################################################
##########################################################################################
## 1. 
def p1():
    class Game:

        num = 8

        def __init__(self, best=8):
            self.best = best
    
        @staticmethod
        def goty_1(game):
            return game >= 8

        @staticmethod
        def goty_2(game):
            return game >= Game.num

        def goty_3(self, game):
            return game >= self.best

    print(f"\n[1] ¿Goty? -> {Game.goty_1(10)}")
    print(f"\n[2] ¿Goty? -> {Game.goty_2(10)}")
    print(f"\n[3] ¿Goty? -> {Game().goty_3(10)}")
    
## 2.
def p2():
    class Calculator:

        @staticmethod
        def sum(num1, num2):
            return num1 + num2

        @staticmethod
        def minus(num1, num2):
            return num1 - num2

        @staticmethod
        def division(num1, num2):
            return num1 // num2

        @staticmethod
        def multiplication(num1, num2):
            return num1 * num2

    print(f"\n[#] Suma: {Calculator.sum(5, 4)}")
    print(f"\n[#] Resta: {Calculator.minus(5, 4)}")
    print(f"\n[#] Division: {Calculator.division(5, 4)}")
    print(f"\n[#] Multiplication: {Calculator.multiplication(5, 4)}")

## 3.
def p3():
    class Auto:
        def __init__(self, brand, model):
            self.brand = brand 
            self.model = model
       
        @classmethod
        def sports(cls, brand):
            return cls(brand, "GT12")

        @classmethod
        def classics(cls):
            return cls("Ford", "T88")
        
        def __str__(self):
            return f"\n[#] Auto: Marca {self.brand}; Modelo: {self.model}."

    Auto_1 = print(Auto.sports("Ferrari"))
    Auto_2 = print(Auto.classics())

## 4.
def p4():
    class School:
        
        valid_age = 18
        students = []

        def __init__(self, name, age):
            self.name = name
            self.age = age

            School.students.append(self)

        @staticmethod
        def check(age):
            return age >= School.valid_age 

        @classmethod
        def learner(cls, name, age):
            if cls.check(age):
                return cls(name, age)
            else:
                print(f"\n[!] Estudiante menor de edad:")
                print(f"\t[#] {name} de {age} años.")

        @staticmethod
        def show():
            print(f"\n[+] Estudiantes mayores de edad:")
            for i, student in enumerate(School.students):
                print(f"\t[{i+1}] {student.name} de {student.age} años.")

    School.learner("Juan", 12)
    School.learner("Roman", 15)
    School.learner("Pancho", 42)
    School.learner("Fabricio", 55)

    School.show()

































